/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NotFoundIndexRouteImport } from './routes/not-found/index'
import { Route as DashboardStatisticsIndexRouteImport } from './routes/dashboard/statistics/index'
import { Route as DashboardBookingsIndexRouteImport } from './routes/dashboard/bookings/index'
import { Route as DashboardBookingsAffiliateIndexRouteImport } from './routes/dashboard/bookings-affiliate/index'
import { Route as DashboardAffiliatesIndexRouteImport } from './routes/dashboard/affiliates/index'

const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotFoundIndexRoute = NotFoundIndexRouteImport.update({
  id: '/not-found/',
  path: '/not-found/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardStatisticsIndexRoute =
  DashboardStatisticsIndexRouteImport.update({
    id: '/statistics/',
    path: '/statistics/',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardBookingsIndexRoute = DashboardBookingsIndexRouteImport.update({
  id: '/bookings/',
  path: '/bookings/',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const DashboardBookingsAffiliateIndexRoute =
  DashboardBookingsAffiliateIndexRouteImport.update({
    id: '/bookings-affiliate/',
    path: '/bookings-affiliate/',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardAffiliatesIndexRoute =
  DashboardAffiliatesIndexRouteImport.update({
    id: '/affiliates/',
    path: '/affiliates/',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/not-found': typeof NotFoundIndexRoute
  '/dashboard/affiliates': typeof DashboardAffiliatesIndexRoute
  '/dashboard/bookings-affiliate': typeof DashboardBookingsAffiliateIndexRoute
  '/dashboard/bookings': typeof DashboardBookingsIndexRoute
  '/dashboard/statistics': typeof DashboardStatisticsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/not-found': typeof NotFoundIndexRoute
  '/dashboard/affiliates': typeof DashboardAffiliatesIndexRoute
  '/dashboard/bookings-affiliate': typeof DashboardBookingsAffiliateIndexRoute
  '/dashboard/bookings': typeof DashboardBookingsIndexRoute
  '/dashboard/statistics': typeof DashboardStatisticsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/not-found/': typeof NotFoundIndexRoute
  '/dashboard/affiliates/': typeof DashboardAffiliatesIndexRoute
  '/dashboard/bookings-affiliate/': typeof DashboardBookingsAffiliateIndexRoute
  '/dashboard/bookings/': typeof DashboardBookingsIndexRoute
  '/dashboard/statistics/': typeof DashboardStatisticsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/not-found'
    | '/dashboard/affiliates'
    | '/dashboard/bookings-affiliate'
    | '/dashboard/bookings'
    | '/dashboard/statistics'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/not-found'
    | '/dashboard/affiliates'
    | '/dashboard/bookings-affiliate'
    | '/dashboard/bookings'
    | '/dashboard/statistics'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/not-found/'
    | '/dashboard/affiliates/'
    | '/dashboard/bookings-affiliate/'
    | '/dashboard/bookings/'
    | '/dashboard/statistics/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  NotFoundIndexRoute: typeof NotFoundIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/not-found/': {
      id: '/not-found/'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/statistics/': {
      id: '/dashboard/statistics/'
      path: '/statistics'
      fullPath: '/dashboard/statistics'
      preLoaderRoute: typeof DashboardStatisticsIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/bookings/': {
      id: '/dashboard/bookings/'
      path: '/bookings'
      fullPath: '/dashboard/bookings'
      preLoaderRoute: typeof DashboardBookingsIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/bookings-affiliate/': {
      id: '/dashboard/bookings-affiliate/'
      path: '/bookings-affiliate'
      fullPath: '/dashboard/bookings-affiliate'
      preLoaderRoute: typeof DashboardBookingsAffiliateIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/affiliates/': {
      id: '/dashboard/affiliates/'
      path: '/affiliates'
      fullPath: '/dashboard/affiliates'
      preLoaderRoute: typeof DashboardAffiliatesIndexRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
  }
}

interface DashboardRouteRouteChildren {
  DashboardAffiliatesIndexRoute: typeof DashboardAffiliatesIndexRoute
  DashboardBookingsAffiliateIndexRoute: typeof DashboardBookingsAffiliateIndexRoute
  DashboardBookingsIndexRoute: typeof DashboardBookingsIndexRoute
  DashboardStatisticsIndexRoute: typeof DashboardStatisticsIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardAffiliatesIndexRoute: DashboardAffiliatesIndexRoute,
  DashboardBookingsAffiliateIndexRoute: DashboardBookingsAffiliateIndexRoute,
  DashboardBookingsIndexRoute: DashboardBookingsIndexRoute,
  DashboardStatisticsIndexRoute: DashboardStatisticsIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  NotFoundIndexRoute: NotFoundIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
